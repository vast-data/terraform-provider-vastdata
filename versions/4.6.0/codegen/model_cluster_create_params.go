/*
 * VAST API Swagger Schema
 *
 * VAST Management API definition
 *
 * API version: 1.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

type ClusterCreateParams struct {
	// Cluster name
	Name string `json:"name"`
	// The build to be installed on the cluster
	Build string `json:"build,omitempty"`
	// Cluster PSNT
	Psnt string `json:"psnt,omitempty"`
	// The list of cnode ips, optional
	CnodeIps []ErrorUnknown `json:"cnode_ips,omitempty"`
	// The list of cnode ipv6 addresses, optional
	CnodeIpv6Pool []ErrorUnknown `json:"cnode_ipv6_pool,omitempty"`
	// The list of D-Boxes
	DnodeIps []ErrorUnknown `json:"dnode_ips,omitempty"`
	// The list of dnode ipv6 addresses, optional
	DnodeIpv6Pool []ErrorUnknown `json:"dnode_ipv6_pool,omitempty"`
	// IPV6 Management VIP
	Ipv6MgmtVip string `json:"ipv6_mgmt_vip,omitempty"`
	// External ipv6 gateway
	Ipv6Gateway string `json:"ipv6_gateway,omitempty"`
	// IPV6 Prefix
	Ipv6Prefix int32 `json:"ipv6_prefix,omitempty"`
	// Number of shards
	Shards int32 `json:"shards,omitempty"`
	// Number of DR shards
	DrShards int32 `json:"dr_shards,omitempty"`
	// Number of DR write buffer shards
	DrWbShards int32 `json:"dr_wb_shards,omitempty"`
	// Number of stripe groups
	StripeGroups int32 `json:"stripe_groups,omitempty"`
	// Number of shards
	MicroShards int32 `json:"micro_shards,omitempty"`
	// Number of DR shards
	MicroDrShards int32 `json:"micro_dr_shards,omitempty"`
	// Number of DR write buffer shards
	MicroDrWbShards int32 `json:"micro_dr_wb_shards,omitempty"`
	// Number of stripe groups
	MicroStripeGroups int32 `json:"micro_stripe_groups,omitempty"`
	// Number of shards
	MegaShards int32 `json:"mega_shards,omitempty"`
	// Number of DR shards
	MegaDrShards int32 `json:"mega_dr_shards,omitempty"`
	// Number of DR write buffer shards
	MegaDrWbShards int32 `json:"mega_dr_wb_shards,omitempty"`
	// Number of stripe groups
	MegaStripeGroups int32 `json:"mega_stripe_groups,omitempty"`
	// Number of cnode cores
	CnodeCores int32 `json:"cnode_cores,omitempty"`
	// Max NVRAM replication factor
	MaxNvramReplicationFactor int32 `json:"max_nvram_replication_factor,omitempty"`
	// Max SSD capacity percent
	MaxSsdCapacityPercent int32 `json:"max_ssd_capacity_percent,omitempty"`
	// Max NVRAM capacity percent
	MaxNvramCapacityPercent int32 `json:"max_nvram_capacity_percent,omitempty"`
	// DBox HA support
	DboxHaSupport bool `json:"dbox_ha_support,omitempty"`
	// Disable directory snapshots
	DisableDirsnap bool `json:"disable_dirsnap,omitempty"`
	// Disable management HA
	DisableMgmtHa bool `json:"disable_mgmt_ha,omitempty"`
	// Disable dev metrics collection
	DisableMetrics bool `json:"disable_metrics,omitempty"`
	// Defrag Threshold
	DefragThreshold int32 `json:"defrag_threshold,omitempty"`
	// Enable support for SMB
	EnableSmb bool `json:"enable_smb,omitempty"`
	// Enable similarity
	EnableSimilarity bool `json:"enable_similarity,omitempty"`
	// Format drives
	FormatDrives bool `json:"format_drives,omitempty"`
	// Don't check cluster performance (default is False, i.e. perform check)
	NoPerfCheck bool `json:"no_perf_check,omitempty"`
	// vast on cloud installation flag (default is False)
	CloudLb bool `json:"cloud_lb,omitempty"`
	// Mock NVMeoF devices with dmsetup devices
	Dmsetup bool `json:"dmsetup,omitempty"`
	// Enable data reduction
	EnableDr bool `json:"enable_dr,omitempty"`
	// Enable data encryption
	EnableEncryption bool `json:"enable_encryption,omitempty"`
	// Encryption type
	EncryptionType string `json:"encryption_type,omitempty"`
	// EKM address
	EkmAddress string `json:"ekm_address,omitempty"`
	// EKM port
	EkmPort int32 `json:"ekm_port,omitempty"`
	// Is half system
	HalfSystem bool `json:"half_system,omitempty"`
	// Should install spdk
	UseSpdk bool `json:"use_spdk,omitempty"`
	// Is deep stripe system
	DeepStripe bool `json:"deep_stripe,omitempty"`
	// DR hash size in buckets
	DrHashSize int32 `json:"dr_hash_size,omitempty"`
	// prefill the mocked devices with zeroes at install
	PrefillDevices bool `json:"prefill_devices,omitempty"`
	// NVRAM size for mocked devices
	NvramSize int32 `json:"nvram_size,omitempty"`
	// Drive size for mocked devices
	DriveSize int32 `json:"drive_size,omitempty"`
	// Loopback (single node) installation
	Loopback bool `json:"loopback,omitempty"`
	// Loopback Configuration
	LoopbackConf string `json:"loopback_conf,omitempty"`
	// Delete snap blocks threshold
	DeleteSnapBlocksThreshold int32 `json:"delete_snap_blocks_threshold,omitempty"`
	// Hack for expansions tests in CI
	SystemExpansionHack bool `json:"system_expansion_hack,omitempty"`
	// Flag for lab deploy only, default: False
	LabDeploy bool `json:"lab_deploy,omitempty"`
	// Flag for disabling cnode access to the system, default: False
	DenyCnodeSystemAccess bool `json:"deny_cnode_system_access,omitempty"`
	// Enable sw_defined (only for SDS setup)
	SwDefined bool `json:"sw_defined,omitempty"`
	// Set the micro shards values to equal the mega shards values
	DisableDefaultMicroShards bool `json:"disable_default_micro_shards,omitempty"`
	// Set the micro shards values to double the mega shards values
	DoubleValueMicroShards bool `json:"double_value_micro_shards,omitempty"`
	// Guid of the system
	ClusterGuid string `json:"cluster_guid,omitempty"`
	// NVRAM Section Layout
	NvramSectionLayout string `json:"nvram_section_layout,omitempty"`
	// List of dboxes slots to disable, optional
	DisableDboxesSlots []ErrorUnknown `json:"disable_dboxes_slots,omitempty"`
	// Ethernet Northbound MTU, optional
	NbEthMtu int32 `json:"nb_eth_mtu,omitempty"`
	// Infiniband Northbound MTU, optional
	NbIbMtu int32 `json:"nb_ib_mtu,omitempty"`
	// Mode of Infiniband network
	IbMode string `json:"ib_mode,omitempty"`
	// Flag for large object scale system
	LargeObjectScale bool `json:"large_object_scale,omitempty"`
	Vsettings *ArbitraryStringsObject `json:"vsettings,omitempty"`
	// Name of the audit directory, which is located under the root directory.
	AuditDirName string `json:"audit_dir_name,omitempty"`
	// Enter users here to grant them read access to all files in the audit directory. To make the audit directory accessible to clients, create a view on the directory.
	ReadAccessUsers []string `json:"read_access_users,omitempty"`
	// Enter groups here to grant them read access to all files in the audit directory. To make the audit directory accessible to clients, create a view on the directory.
	ReadAccessUsersGroups []string `json:"read_access_users_groups,omitempty"`
	// Maximum audit file size for each CNode core
	MaxFileSize int32 `json:"max_file_size,omitempty"`
	// Max retention period for audit files
	MaxRetentionPeriod int32 `json:"max_retention_period,omitempty"`
	// Max retention period timeunit for audit files
	MaxRetentionTimeunit string `json:"max_retention_timeunit,omitempty"`
	// Map of protocols audit configurations
	ProtocolsAudit *interface{} `json:"protocols_audit,omitempty"`
	// Protocols to audit
	Protocols []string `json:"protocols,omitempty"`
	// Default Share level permissions for Others
	DefaultOthersShareLevelPerm string `json:"default_others_share_level_perm,omitempty"`
}
