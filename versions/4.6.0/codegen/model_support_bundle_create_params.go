/*
 * VAST API Swagger Schema
 *
 * VAST Management API definition
 *
 * API version: 1.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

type SupportBundleCreateParams struct {
	// Specify an identifying label to include in the bundle file name.
	Prefix string `json:"prefix,omitempty"`
	// Bundle level e.g. small, medium, large
	Level string `json:"level,omitempty"`
	// Bundle path
	Path string `json:"path,omitempty"`
	// Saves an aggregated bundle file on the management CNode in addition to the separate bundle files that are saved per node.
	Aggregated bool `json:"aggregated,omitempty"`
	// A predefined preset bundle
	Preset string `json:"preset,omitempty"`
	// Converts all bundled objects to text and obfuscates them. Any data that cannot be converted to text is not included in the bundle. The following types of information are replaced with a non-reversible hash: file and directory names, IP addresses, host names, user names, passwords, MAC addresses.
	Obfuscated bool `json:"obfuscated,omitempty"`
	// Start time of logs in UTC+3
	StartTime string `json:"start_time,omitempty"`
	// End time of logs in UTC+3
	EndTime string `json:"end_time,omitempty"`
	// Convert all bundled objects to a textual format. Any data that cannot be converted to text is not included in the bundle.
	Text bool `json:"text,omitempty"`
	// Arguments for the hubble command. Note: times should be in UTC (Use with caution)
	HubbleArgs string `json:"hubble_args,omitempty"`
	// Arguments for the astron command. Note: times should be in UTC (Use with caution)
	AstronArgs string `json:"astron_args,omitempty"`
	// Collect from specific CNodes. Specify as a comma separated array of CNode IDs. If not specified, logs are collected from all CNodes.
	CnodeIds string `json:"cnode_ids,omitempty"`
	// Collect from specific DNodes. Specify as a comma separated array of DNode IDs. If not specified, logs are collected from all DNodes.
	DnodeIds string `json:"dnode_ids,omitempty"`
	// Collect support bundle from CNodes in these vip-pools IDs
	VippoolIds string `json:"vippool_ids,omitempty"`
	// Collect logs from CNodes only
	CnodesOnly bool `json:"cnodes_only,omitempty"`
	// Collect logs from DNodes only
	DnodesOnly bool `json:"dnodes_only,omitempty"`
	// Maximum data limit to apply to the collection of binary trace files, in GB, per node.
	MaxSize float32 `json:"max_size,omitempty"`
	// Upload Support Bundle immediately after creation
	SendNow bool `json:"send_now,omitempty"`
	// If true, upload non-aggregated Support Bundle via VMS (requires proxy). Otherwise, upload from each node.
	UploadViaVms bool `json:"upload_via_vms,omitempty"`
	// Sub-Directory in support bucket
	BucketSubdir string `json:"bucket_subdir,omitempty"`
	// S3 Bucket access key
	AccessKey string `json:"access_key,omitempty"`
	// S3 Bucket secret key
	SecretKey string `json:"secret_key,omitempty"`
	// S3 Bucket for upload
	BucketName string `json:"bucket_name,omitempty"`
	// Delete bundle immediately after successfully uploading
	DeleteAfterSend bool `json:"delete_after_send,omitempty"`
	// A comma separated list of handles to send to md_tool_cli
	MdToolHandles string `json:"md_tool_handles,omitempty"`
	// A comma separated list of block addresses to send to md_tool_cli
	MdToolAddresses string `json:"md_tool_addresses,omitempty"`
}
