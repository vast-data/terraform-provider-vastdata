/*
 * VAST API Swagger Schema
 *
 * VAST Management API definition
 *
 * API version: 1.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"time"
)

type Quota struct {
	//
	Id int32 `json:"id,omitempty"`
	// Quota guid
	Guid string `json:"guid,omitempty"`
	// The name
	Name        string `json:"name,omitempty"`
	State       string `json:"state,omitempty"`
	SyncState   string `json:"sync_state,omitempty"`
	PrettyState string `json:"pretty_state,omitempty"`
	// Directory path
	Path string `json:"path,omitempty"`
	// Quota enforcement pretty grace period in seconds, minutes, hours or days. Example: 90m
	PrettyGracePeriod string `json:"pretty_grace_period,omitempty"`
	// Quota enforcement grace period in seconds, minutes, hours or days. Example: 90m
	GracePeriod string `json:"grace_period,omitempty"`
	// Grace period expiration time
	TimeToBlock string `json:"time_to_block,omitempty"`
	// Soft quota limit
	SoftLimit int64 `json:"soft_limit,omitempty"`
	// Hard quota limit
	HardLimit int64 `json:"hard_limit,omitempty"`
	// Hard inodes quota limit
	HardLimitInodes int32 `json:"hard_limit_inodes,omitempty"`
	// Soft inodes quota limit
	SoftLimitInodes int32 `json:"soft_limit_inodes,omitempty"`
	// Used inodes
	UsedInodes int32 `json:"used_inodes,omitempty"`
	// Used capacity in bytes
	UsedCapacity int64 `json:"used_capacity,omitempty"`
	// Used capacity in TB
	UsedCapacityTb float32 `json:"used_capacity_tb,omitempty"`
	// Used effective capacity in bytes
	UsedEffectiveCapacity int64 `json:"used_effective_capacity,omitempty"`
	// Used effective capacity in TB
	UsedEffectiveCapacityTb float32 `json:"used_effective_capacity_tb,omitempty"`
	// Tenant ID
	TenantId int32 `json:"tenant_id,omitempty"`
	// Parent Cluster
	Cluster string `json:"cluster,omitempty"`
	// Parent Cluster ID
	ClusterId int32 `json:"cluster_id,omitempty"`
	//
	SystemId             int32         `json:"system_id,omitempty"`
	DefaultUserQuota     *interface{}  `json:"default_user_quota,omitempty"`
	DefaultGroupQuota    *interface{}  `json:"default_group_quota,omitempty"`
	UserQuotas           []interface{} `json:"user_quotas,omitempty"`
	GroupQuotas          []interface{} `json:"group_quotas,omitempty"`
	IsUserQuota          bool          `json:"is_user_quota,omitempty"`
	EnableEmailProviders bool          `json:"enable_email_providers,omitempty"`
	NumExceededUsers     int32         `json:"num_exceeded_users,omitempty"`
	NumBlockedUsers      int32         `json:"num_blocked_users,omitempty"`
	// Enable alarms when users or groups are exceeding their limit
	EnableAlarms         bool      `json:"enable_alarms,omitempty"`
	LastUserQuotasUpdate time.Time `json:"last_user_quotas_update,omitempty"`
	// The default Email if there is no suffix and no address in the providers
	DefaultEmail string `json:"default_email,omitempty"`
	// Percent of used inodes out of the hard limit
	PercentInodes int32 `json:"percent_inodes,omitempty"`
	// Percent of used capacity out of the hard limit
	PercentCapacity int32 `json:"percent_capacity,omitempty"`
}
