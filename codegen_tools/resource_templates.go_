package main

import (
	"fmt"

	"github.com/pb33f/libopenapi"

	api4_6_0 "github.com/vast-data/terraform-provider-vastdata/versions/4.6.0/codegen"
	"os"
	"reflect"
	"regexp"
	"strconv"
	"strings"
	"text/template"
)

func ToListOfStrings(s string) string {
	o := []string{}
	for _, t := range strings.Split(s, ",") {
		o = append(o, fmt.Sprintf("\"%s\"", t))
	}
	return strings.Join(o, ",")
}

func GetTFformatName(s string) string {
	re := regexp.MustCompile("([A-Z])")
	t := re.ReplaceAllString(s, "_${1}")
	return strings.ToLower(strings.TrimLeft(t, "_"))
}
func LoadApi(filename string) (libopenapi.Document, error) {
	_api, _ := os.ReadFile(filename)
	doc, err := libopenapi.NewDocument(_api)
	return doc, err

}

var funcMap template.FuncMap = template.FuncMap{
	"upper":           strings.ToUpper,
	"split":           strings.Split,
	"ToListOfStrings": ToListOfStrings,
}

type StringSet struct {
	_set map[string]struct{}
}

// Add a string key to the set
func (s *StringSet) Add(k string) {
	s._set[k] = struct{}{}
}

// Check if a string key is in the set
func (s *StringSet) In(k string) bool {
	_, exists := s._set[k]
	return exists
}

// Remove a string key from set
func (s *StringSet) Del(k string) {
	if s.In(k) {
		delete(s._set, k)
	}
}

func (s *StringSet) ToArray() []string {
	arr := []string{}
	for k, _ := range s._set {
		arr = append(arr, k)
	}
	return arr
}

func (s *StringSet) QueryStringFmt() string {
	arr := s.ToArray()
	q1 := ""
	q2 := ""
	for _, a := range arr {
		q1 += a + "=%v&"
		q2 += "," + a
	}
	return "\"" + strings.TrimRight(q1, "&") + "\"" + q2
}

// Get a new StringSet that can be populated from the beginning with strings
func NewStringSet(s ...string) *StringSet {
	new_string_set := StringSet{_set: make(map[string]struct{})}
	for _, elem := range s {
		new_string_set.Add(elem)

	}
	return &new_string_set
}

type ResourceTemplate struct {
	ResourceName             string
	Fields                   []map[string]string
	Path                     string
	Model                    interface{}
	DestFile                 string
	IgnoreFields             *StringSet
	RequiredIdentifierFields *StringSet
	OptionalIdentifierFields *StringSet
	ListsNamesMap            map[string][]string
}

func (r *ResourceTemplate) X() []string {
	return []string{}
}

func (r *ResourceTemplate) SetupListProperties(s string, m *map[string]string) {
	re := regexp.MustCompile("\\[\\]")
	t := re.FindAllString(s, -1)
	(*m)["type"] = "TypeList"
	(*m)["length"] = strconv.Itoa(len(t))
	l, exists := r.ListsNamesMap[(*m)["name"]]
	if exists {
		(*m)["names"] = strings.Join(l, ",")
	} else {
		x := []string{}
		for i := 0; i < len(t); i++ {

			x = append(x, fmt.Sprintf("elem%d", i))
		}
		(*m)["names"] = strings.Join(x, ",")
	}
	if strings.Contains(s, "string") {
		(*m)["set_type"] = "String"
	} else if strings.Contains(s, "int") {
		(*m)["set_type"] = "Int"
	}

}

func ProcessResourceTemplate(R *ResourceTemplate) {
	var elem_type string
	Fields := []map[string]string{}
	r := R.Model
	t := reflect.TypeOf(r)
	for _, e := range reflect.VisibleFields(t) {
		if R.IgnoreFields.In(e.Name) {
			continue
		}
		m := map[string]string{"name": GetTFformatName(e.Name), "modelName": e.Name}
		if R.RequiredIdentifierFields.In(m["name"]) {
			m["computed"] = "false"
			m["required"] = "true"
			m["optional"] = "false"
		} else if R.OptionalIdentifierFields.In(m["name"]) {
			m["computed"] = "true"
			m["required"] = "false"
			m["optional"] = "true"
		} else {
			m["computed"] = "true"
			m["required"] = "false"
			m["optional"] = "false"
		}
		elem_type = e.Type.String()
		switch elem_type {
		case "int", "int32", "int64", "int8", "int16":
			m["type"] = "TypeInt"
		case "string":
			m["type"] = "TypeString"
		case "bool":
			m["type"] = "TypeBool"
		case "[]string", "[]int", "[]int32", "[]int64", "[][]string", "[][]int", "[][]int32", "[][]int64":
			R.SetupListProperties(elem_type, &m)
		default:
			m["type"] = elem_type
		}
		Fields = append(Fields, m)

	}
	R.Fields = Fields

}

func ResourceTemplateToTerrafromElem(r *ResourceTemplate) {
	tmpl := `
          {{ range  .Fields}}
          &schema.Schema{
               	Type: 	  schema.{{ .type }},
		Computed: {{ .computed }},
                Required: {{ .required }},
                Optional: {{ .optional }},                              

          }


`
	t := template.Must(template.New("tf").Funcs(funcMap).Parse(tmpl))
	err := tmpl.Execute(os.Stdout, r)
	if err != nil {
		fmt.Println(err)
	}

}

func BuildTemplate(r ResourceTemplate) {
	ProcessResourceTemplate(r)
	ResourceTemplateToTerrafromElem(&r)

}
